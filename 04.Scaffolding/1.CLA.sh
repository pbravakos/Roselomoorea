#!/bin/bash
#SBATCH --partition=batch
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu=6400
#SBATCH --job-name="CLA"
#SBATCH --output=CLA_job_%j.out
#SBATCH --mail-user=pbravakos@hcmr.gr
#SBATCH --mail-type=FAIL,END


generalInfo () {
    cat <<END
	
	This script takes as input one argument. 
	For Strain 01 that would be: 
	sbatch ${ScriptName} Strain01
	
	IMPORTANT!
	I have modified the program in order to run most of the sub-programs like bwa, blast and bowtie2 (in place of the default bowtie) from the path!!! I have also modified the sub-program GapFiller to be able to find the perl module getopts.

	NOTE:
	Scaffolds fasta files used here as input is the Spades scaffolds output.
	References were selected by blast search of the Barnap 16S and 23S results on NCBI nr database.

END
}

if [[ -n $SLURM_JOB_ID ]];  then
    ScriptName=$(scontrol show job $SLURM_JOBID | awk '/Command=/ {print $1}' | awk -F '[ =]' '{print $2}' | grep -Eo "[^/]+$")
    # Some job specific info
    echo "Job ID is = " $SLURM_JOBID
    echo "SLURM cluster name = " $SLURM_CLUSTER_NAME
    echo "SLURM partition = " $SLURM_JOB_PARTITION
    echo "SLURM node list = " $SLURM_JOB_NODELIST
    echo "SLURM num of nodes = " $SLURM_JOB_NUM_NODES
    echo "SLURM number of tasks = " $SLURM_NTASKS
    echo "SLURM memory per node = " $SLURM_MEM_PER_NODE
    echo "SLURM memory per cpu = " $SLURM_MEM_PER_CPU
    echo "working directory = " $SLURM_SUBMIT_DIR
    echo "=================================================="
    echo "SBATCÎ— job started " `date`
    echo "=================================================="
    echo
else 
    ScriptName=${0##*/}
    generalInfo
    exit 1
fi

# Check that an argument has been given in the correct form.
if [[ $# -ne 1 ]] || [[ ! $1 =~ ^Strain[0-9]{2}$ ]]; then
   echo "Exactly one argument should be given, which has to be in the form of 'StrainXX' where X is a number from 0 up to 9!" >&2
   generalInfo >&2
   exit 1
fi


# INITIAL PARAMETERS
StrainX=$1
StrX=${StrainX/ain/}
StrNum=${StrainX/Strain/}
StrainCode="HK7V7BBXY"
Iteration=Iter2 

OutputDir=${HOME}/Titlos_ktisis/CLA/${StrainX}
SpadesDir=${HOME}/Titlos_ktisis/Spades/${StrainX}/${Iteration}
InputScaff=scaffolds.fasta

RefDir=${HOME}/Titlos_ktisis/References/${StrainX}
RefFasta=Bacillus_vietnamensis_strain_151-6.fasta

CLADir=${HOME}/Software/C-L-Authenticator_v.1.0_Linux

# We will use the Prinseq fastq files here, in order to have as much (filtered!) reads as possible.
PrinseqReadsDir=${HOME}/Titlos_ktisis/Prinseq/${StrainX}

PE1=${StrX}_${StrainCode}_prinseq_good_R_1.fastq
PE2=${StrX}_${StrainCode}_prinseq_good_R_2.fastq

InsertSize=296


export LC_ALL=en_US.UTF-8
#==========================================================================================================================================

[[ ! -d ${OutputDir} ]] && mkdir -p ${OutputDir}

cd ${OutputDir}


# Create links for input files:
# 1. Two read files in fastq format generated by paired end sequencing
# 2. Contig file from any of the desired denovo assemblers
# 3. Reference genome in fasta format
ln -s ${PrinseqReadsDir}/$PE1
ln -s ${PrinseqReadsDir}/$PE2
ln -s ${SpadesDir}/${InputScaff}
ln -s ${RefDir}/${RefFasta}

# Run the program!!
perl ${CLADir}/C-L-Authenticator -i ${InputScaff} -r1 $PE1 -r2 $PE2 -ref ${RefFasta} -f 1 -ins $InsertSize

rm CLA-Results/j*

##-------------------------------------------------------------------------------
## Finally create a job dependency to move this job's output to working directory.
#cd $SLURM_SUBMIT_DIR
#MoveOutput=${StrainX}_job_${SLURM_JOBID}_mv_output.sh       

## Create the bash file, to move the SLURM output.
#cat > ${MoveOutput} << EOF
##!/bin/bash
##SBATCH --partition=fast
##SBATCH --nodes=1
##SBATCH --ntasks-per-node=1
##SBATCH --mem-per-cpu=100
##SBATCH --job-name="mv"
##SBATCH --output=/dev/null

#mv ${SLURM_JOB_NAME}_job_${SLURM_JOB_ID}.out ${OutputDir}

#EOF

#echo
## Start a job dependency to move the Sdtout file to the output directory.
#sbatch --dependency=afterany:"$SLURM_JOB_ID" ${MoveOutput}

#rm ${MoveOutput}

echo "==============================="
echo "PBS job finished " `date`
echo

# finished commands

# getting end time to calculate time elapsed
elapsed=$SECONDS
echo Time taken: `printf '%dd %dh:%dm:%ds\n' $((elapsed/86400)) $((elapsed%86400/3600)) $((elapsed%3600/60)) $((elapsed%60))`

exit 0


